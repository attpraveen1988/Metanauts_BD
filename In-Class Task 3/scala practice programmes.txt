Duplicate

package com.test.scala

object duplicate
{
  def main(args: Array[String]): Unit = {
    val nums = List(1, 3, 5, 2, 7, 9, 11, 5, 2, 14, 12, 3)
    println("Original list:")
    println(nums)
    val result1 = nums.distinct
    println("Unique elements of the said list:")
    println(result1)
  }
}


EVEN ODD

package com.test.scala

object Even_Odd
{
  def main(args: Array[String]): Unit =
  {
    val nums = List(1, 2, 3, 4, 5, 7, 9, 11, 14, 12, 16)
    println("Original list:")
    println(nums)
    val even_nums = nums.filter(_ % 2 ==0)
    println("Even number of the said list:")
    println(even_nums)
    val odd_nums = nums.filter(_ % 2 != 0)
    println("Odd number of the said list:")
    println(odd_nums)
  }
}

MIN MAX


package com.test.scala

object Min_Max
{
  def main(args: Array[String]): Unit =
  {
    //Iterate over a list
    val nums = List(1, 3, 5, 7, 9, 11, 14, 12)
    println("Original list:")
    println(nums)
    println("Largest number of the said list:")
    println(nums.max)
    println("Smallest number from the said list:")
    println(nums.min)
  }
}

ElementOcc

object Elmnt_Occ {

  def list_element_occurrences[A](list1:List[A]):Map[A, Int] = {
    list1.groupBy(el => el).map(e => (e._1, e._2.length))
  }

  def main(args: Array[String]): Unit = {
    println(list_element_occurrences(List(1,1,1,2,2,3,6,4,4,6,1,6,2)))
    println(list_element_occurrences(List("Red", "Green", "White", "Black", "Red", "Green", "Black")))
  }
}

Iterate

package com.test.scala

object Iterate
{
  def main(args: Array[String]): Unit =
  {
    //Iterate over a list
    val nums = List(1, 3, 5, 7, 9)
    println("Iterate over a list:")
    for( i <- nums)
    {
      println(i)
    }

    println("Sum all the items of the said list:")
    //Applying sum method
    val result = nums.sum
    println(result)

    println("Multiplies all the items of the said list:")
    val result1 = nums.product
    println(result1)
  }
}

